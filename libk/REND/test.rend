#include "../libk.h"
/*
    rend.c is a ../WARF/wind.c derivative

    note: wind.c is written in terms of text coordinates x,y
*/

void rend(int xmin, int xmax, int ymin, int ymax, int numbLines)
{
    assert(ymin >= 0); assert(ymax < glob.numbLines);
    assert(ymax >= ymin); assert((ymax - ymin) < glob.rows);

    int count = 0; int look = 0;
    int y; int maxindex = 0;
    for (y =  ymin; y <= ymax; y++)
    {
     maxindex = maxindex + text[y].size;
    }
     maxindex = maxindex + 1000; 
     char* abuff = malloc(sizeof(char)*maxindex); assert(abuff != NULL);

    for (y = ymin; y <= ymax; y++) 
    {
      int x; char* s = xmin + text[y].row;
      for ( x = xmin; x <= xmax; x++)
      {

//  following are two tests to determine whether *s should be stored in abuf

        if (x>=text[y].size )  break; assert(*s != '\n');

//  here *s tests ok, assign it to abuff[]

        if (x == glob.ix && y == glob.iy) look = count;
        abuff[count] = *s; s++; count++; assert(count < maxindex);
       }

//  test whether to display the last line without a newline  
//  which otherwise would move the cursor below the window (virtural screen) 
//  possibly causing a virtual screen mismatch with the actual screen

    if(y != ymax) {abuff[count] = '\n'; count++;}
    
     }

   count++; assert(count < maxindex);
   abuff[count] = '\0'; 

/*******************************************************************************/
   bildHL(1, look, abuf);
/*******************************************************************************/
 
   char* rbuff = malloc(maxindex*sizeof(char));
   int na; int nr = 0; int limit = strlen(abuff); counter = 0; 
   for( na = 0; na <= limit; na ++)
   {

     if (na ==arg2.HLindex[counter].index)  
        { 
          char* ptr = arg2.HLchange[counter].change;
          memcpy(rbuff+nr,ptr,strlen(ptr)); 
          nr = nr + strlen(ptr);
          counter++;
        }
     rbuff[nr] = abuff[na]; nr++;
   }

   assert(nr < maxindex);
   printf("%s",rbuff);

    if(abuff != NULL) free(abuff);
    if(rbuff != NULL) free(rbuff);

}
