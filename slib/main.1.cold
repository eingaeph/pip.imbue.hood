
#include <unistd.h>   //read,write
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h> //open,close per Kerrisk page 72
#include <fcntl.h>    //open,close per Kerrisk page 72

#include <ctype.h>
#include <errno.h>
#include <sys/ioctl.h>
#include <termios.h>

/*** REAF, IO, ADAL, NCOD ***/

/*** global variables ***/

    size_t linecap;
    int nread;
    struct { int fp; int nread; } nput;

typedef struct slot
{
    ssize_t size;
    char *row;
    int count;
}   slot;

    slot line;
    slot *text;

struct termios orig_termios;

/*** function declarations ***/

int encode (int count, char* seq);

void die(const char *s);

void disableRawMode();

void enableRawMode();

void writeDigit(int digit);

int getr(char **qtr);

int addAline(int here,int maxndx);

int deleteAline(int omit,int maxndx);

void etxt(int maxndx);

int replaceAline(int nsrt,int maxndx);

int readAline(void);
            

/*** write (to the screen) ***/

void writeDigit(int digit)
{
//char buf[] = "abcdefghijklmnopqrstuvwxyz";
  char buf[] = "                          ";
   snprintf(buf,4,"%d",digit);
   write(STDOUT_FILENO,buf,4);
   return;
}


int readAline(void)
{
    line.row = 0; linecap = 0;
//  line.size = getline (&line.row, &linecap,nput.fp); 
    line.size = getr(&line.row);    

    if (line.size != -1) {writeDigit(line.size);}
    if (line.size != -1) {write(1,"\n",1);}
    if (line.size == -1) {write(1,"abort\n",6);}
    if (line.size == -1) {return line.size;}

    if((line.count == 0)) 
         { text = (slot *) malloc(     (1+line.count)*sizeof(slot));}
    else { text = (slot *)realloc(text,(1+line.count)*sizeof(slot));}

    char * ptr = malloc(line.size*sizeof(char));
    text[line.count].row = ptr  ;
    text[line.count].size = line.size;
    memcpy(ptr,line.row,line.size);  

    line.count++; 
    return line.size;
}

int main(int argc, char** argv)
{
    char* filename = argv[1];
    int numb; int retval; int lastline;

    if(argc == 1) return 0;

    write(1,argv[1],strlen(argv[1]));
    write(1,"\r\n",2);

    nput.fp = open(filename,O_RDONLY);

    line.count = 0;
    for (numb = 0 ; numb < 15; numb++) 
    {
    retval=readAline();
    write(1,"retval = ",9); writeDigit(retval); write(1,"\n",1);
    if (nput.nread < 1) {break;}
    lastline = line.count; 
    }
    
    close(nput.fp);
    char buf[8];
    snprintf(buf,8,"%d\n",lastline);
    write(1,buf,strlen(buf));
    write(1," lines were read\n\r",17);

    return 0;
 }

