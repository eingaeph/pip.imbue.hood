#include "../libk.h"
/*  
    WARF write after reading file: read and display test.dat
    text, screen and window coordinates
    x,y, u,v f,g
*/
int main(int arc, char** argv)
{
    char *filename =argv[1];

    printf("test.WARF executing\n");
    printf("filename = %s\n",filename);

    int numblines = readAfile(filename); glob.numbLines = numblines;

    printf("\n%d lines were read\n\n",numblines);
    enableRawMode(); uvset(); disableRawMode();
    screenTest();

/*

  initially xmin = 0; ymin = 0; ix = 0; iy = 0;

  wind input: xmin, ymin, xmax, ymax
  scrolling sets xmin, ymin
  u  == x - xmin + (umin = 0)
  v  == y - ymin + (vmin = 1)
  cu == ix - xmin + (umin = 0)
  cv == iy - ymin + (vmin = 1)
  y < numblines
  u < cols
  v < rows 

  text coordinates:         x,y
  corner point of window:   xmin,ymin
  maximum value of y:       ymax  
  insertion point:          ix iy
  number of lines:          numblines, assert(ymax+1==numblines);        
  
  screen cordinates:        u,v
  screen columns:           cols       assert(u < cols)
  screen rows:              rows       assert(v < rows);
  cursor location           cu,cv      assert(cu == ix - xmin);
                                       assert(cv == iy - ymin);

  window coordinates:       f,g    
                            fmin       assert(u == f + fmin);
                            gmin       assert(v == g + gmin);
                            fmax       assert(      
*/
    glob.ymin = 0;
    glob.ymax = glob.rows -1;
printf("ymax  %d  numbLines %d \n\r",glob.ymax,glob.numbLines);
    if (glob.ymax > glob.numbLines -1) {glob.ymax = glob.numbLines -1;
    printf("ymax  %d  numbLines %d \n\r",glob.ymax,glob.numbLines);}
printf("ymax  %d  numbLines %d \n\r",glob.ymax,glob.numbLines);
    int testa = (glob.ymax < glob.numbLines);
printf("testa %d \n\r",testa);
    assert(glob.ymin >= 0); assert(glob.ymax < glob.numbLines);
    assert(glob.ymax >= glob.ymin); assert((glob.ymax - glob.ymin) < glob.rows);

    wind(0,glob.rows-1,0,glob.ymax,glob.numbLines);

  while (1) 

   {

    int retval = ReadKey(); if (retval == CTRL_Q) return 0;

    char c = retval;

//    printf("\x1b[%d;%df",10,1); fflush(stdout);

    if (retval > 127) {printf("%d\n", retval);continue;}
    if (iscntrl(c))   {printf("%d\n", c);continue;} 
                      {printf("%d ('%c')\n", c, c);}

   }

    return 0;
 }
