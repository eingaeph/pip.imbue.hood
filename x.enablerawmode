
lineno 204 0203 KILO int enableRawMode(int fd) {
lineno 205 0204 KILO     struct termios raw;
lineno 206 0205 KILO 
lineno 207 0206 KILO     if (E.rawmode) return 0; /* Already enabled. */
lineno 208 0207 KILO     if (!isatty(STDIN_FILENO)) goto fatal;
lineno 209 0208 KILO     atexit(editorAtExit);
lineno 210 0209 KILO     if (tcgetattr(fd,&orig_termios) == -1) goto fatal;
lineno 211 0210 KILO 
lineno 212 0211 KILO     raw = orig_termios;  /* modify the original mode */
lineno 213 0212 KILO     /* input modes: no break, no CR to NL, no parity check, no strip char,
lineno 214 0213 KILO      * no start/stop output control. */
lineno 215 0214 KILO     raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
lineno 216 0215 KILO     /* output modes - disable post processing */
lineno 217 0216 KILO     raw.c_oflag &= ~(OPOST);
lineno 218 0217 KILO     /* control modes - set 8 bit chars */
lineno 219 0218 KILO     raw.c_cflag |= (CS8);
lineno 220 0219 KILO     /* local modes - choing off, canonical off, no extended functions,
lineno 221 0220 KILO      * no signal chars (^Z,^C) */
lineno 222 0221 KILO     raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);
lineno 223 0222 KILO     /* control chars - set return condition: min number of bytes and timer. */
lineno 224 0223 KILO     raw.c_cc[VMIN] = 0; /* Return each byte, or zero for timeout. */
lineno 225 0224 KILO     raw.c_cc[VTIME] = 1; /* 100 ms timeout (unit is tens of second). */
lineno 226 0225 KILO 
lineno 227 0226 KILO     /* put terminal in raw mode after flushing */
lineno 228 0227 KILO     if (tcsetattr(fd,TCSAFLUSH,&raw) < 0) goto fatal;
lineno 229 0228 KILO     E.rawmode = 1;
lineno 230 0229 KILO     return 0;
lineno 231 0230 KILO 
lineno 232 0231 KILO fatal:
lineno 233 0232 KILO     errno = ENOTTY;
lineno 234 0233 KILO     return -1;
lineno 235 0234 KILO }




